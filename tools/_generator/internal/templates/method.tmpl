// Auto generated file!

package wargaming
{{- $imports := .MethodImports}}
{{if $imports}}
import ({{range $imports}}
	"{{.}}"
{{- end}}
)
{{end}}
// {{.Name}} {{.Documentation | summaryDoc}}
//
// https://developers.wargaming.net/reference/all/{{replaceAll .Id "_" "/"}}{{if .Deprecated}}
//
// Deprecated: Attention! The method is deprecated.{{end}}
//
// realm:
//     Valid realms: {{.AllowedRealms | realmList}}
{{- range .Parameters}}
{{if .Description}}{{paramDoc .}}{{end}}
{{- end}}
{{- define "methodReturns"}}{{if or .DataType .MetaType}}({{end}}{{if .DataType}}{{. | dataReturnType}}, {{end}}{{if .MetaType}}{{. | metaReturnType}}, {{end}}error{{if or .DataType .MetaType -}} ) {{- end}}{{end}}
func (service *{{.Game | camelLowerToCamel}}Service) {{.Name}}(ctx context.Context, realm Realm{{range .Parameters}}, {{.Name}} {{.TypeStr}}{{end}}{{if .OptionsType}}, options {{. | optionsType}}{{end}}) {{template "methodReturns" .}} {
	if err := validateRealm(realm, []Realm{{"{"}}{{.AllowedRealms | realmList}}{{"}"}}); err != nil {
		return {{if .DataType}}nil, {{end}}{{if .MetaType}}nil, {{end}}err
	}

	reqParam := map[string]string{
{{- range .Parameters}}
		"{{.JsonTag}}": {{valueToStringConv .TypeStr .Name}},
{{- end}}
	}
{{if .OptionsType}}
	if options != nil {{"{"}}{{range .OptionsType.Fields}}
		if options.{{.Name}} != nil {
			reqParam["{{.JsonTag}}"] = {{valueToStringConvOptions .TypeStr .Name}}
		}
	{{- end}}
	}{{"\n"}}{{end}}
	{{if .DataType}}var data {{. | dataReturnType}}{{end}}
	{{- if .MetaType}}{{"\n\t\t"}}var metaData {{. | metaReturnType}}{{end}}
	err := service.client.{{.HttpMethods | requestMethod}}(ctx, section{{.Game | camelLowerToCamel}}, realm, "{{.Url}}/", reqParam, {{if .DataType}}&data{{else}}nil{{end}}, {{if .MetaType}}&metaData{{else}}nil{{end}})
	return {{if .DataType}}data, {{end}}{{if .MetaType}}metaData, {{end}}err
}
